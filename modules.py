# write functions that perform queries and modification here

import psycopg2

# Add one player
def add_single_player(conn, cur, pid, name, gender, nationality, msg):
    try:
        cur.execute( "insert into  player values (%s, %s, %s, %s, 0, 0, 0);" , (pid, name, gender, nationality))
        conn.commit() #connection must commit all executions done (save changes)
        #cursor will return to initial  position automatically
        msg.set("Player added successfully.")
    except psycopg2.Error as e:
        conn.rollback() #if error cursor is stuck so ned to manually reset connection and cursor to execute next statement 
        msg.set(e.pgerror)


# find the player who has won the most gold medals

def player_with_most_gold_medals(conn, cur, country, msg):
    try:
        cur.execute('''select pname, gold_number from player
        where cname = %s
        and gold_number = (
            select max(gold_number) from player
            where cname = %s
            );''',(country, country,))

        result = cur.fetchall()
        conn.commit()
        if result:
            msg.set("Player's name: {}".format((', ').join(map(lambda x: x[0], result)))
                    + "\nGold number: {}".format((', ').join(map(str, map(lambda x: x[1], result)))))

        # error message if no result generated by query
        else:
            msg.set("Players not found")

    except psycopg2.Error as e:
        conn.rollback()
        msg.set(e.pgerror)


# Find female with the most gold medals from country with most gold medals

def female_player_with_most_gold_medals_in_country_with_most_gold_medals(conn, cur, msg):
    try:
        cur.execute('''select pname, gold_number, cname from player
        where cname in (select cname from country where gold_number = (
                select max(gold_number) from country
            )
        )
        and gender = 'Female'
        and gold_number = (
        select max(gold_number) from player
            where gender = 'Female' and cname in
            (select cname from country where gold_number = (
                select max(gold_number) from country
                )
            )
        );''')

        result = cur.fetchall()
        conn.commit()
        if result:
            msg.set("Player's name: {}".format((', ').join(map(lambda x: x[0], result)))
                    + "\nGold number: {}".format((', ').join(map(str, map(lambda x: x[1], result))))
                    + "\nNationality: {}".format((', ').join(map(str, map(lambda x: x[2], result)))))

        # error message if no result generated by query
        else:
            msg.set("Players not found")

    except psycopg2.Error as e:
        conn.rollback()
        msg.set(e.pgerror)

# update give a medal to each player who won 1st, 2nd or 3rd place in  a 'finals' match
# if the player won more than one medal (participated in multiple matches) give him the right number of medals
def update_player_medal(conn,cur, msg):
    try:
        cur.execute('''do $$
          declare
            arow record;
            BEGIN
                FOR arow IN SELECT player_id FROM (
                    SELECT player_id FROM participate p
                    right JOIN matches ON matches.match_type = 'final' and p.match_id = matches.match_id
                    ) s
                LOOP
                    UPDATE player
                        SET gold_number = (select count(*) from participate p where ranking = 1 and p.player_id = arow.player_id)
                        ,silver_number = (select count(*) from participate p where ranking = 2 and p.player_id = arow.player_id)
                        ,bronze_number = (select count(*) from participate p where ranking = 3 and p.player_id = arow.player_id)
                        where player_id = arow.player_id;
                END LOOP;
            END; $$''')
        conn.commit() 
        msg.set("Medals added to Players successfully.")
    except psycopg2.Error as e:
        conn.rollback() 
        msg.set(e.pgerror)


# -- get the number of medals from each player of same country
# -- add it to each respective medal count of that country
# -- then calculate the total number of medals for that country
def update_country_medal(conn, cur, msg):
    try: 
        cur.execute
        ('''Update country
        set gold_number = 
        (select sum(player.gold_number) from player
         where country.cname = player.cname
        ),
        silver_number = 
        (select sum(player.silver_number) from player
         where country.cname = player.cname
        ),
        bronze_number = 
        (select sum(player.bronze_number) from player
         where country.cname = player.cname
        ),
        total_medal_number = 
        (select sum(player.gold_number)+sum(player.silver_number)+sum(player.bronze_number) from player
         where country.cname = player.cname
        );''')
        conn.commit() 
        msg.set("Medals added to Countries successfully.")
    except psycopg2.Error as e:
        conn.rollback() 
        msg.set(e.pgerror)

# Find all players who got gold and participate in a specific category of a match
def get_gold_medel_player(conn, cur, stype, team_type, gender, msg):
    try: 
        cur.execute('''
        select pname, gold_number from player
        where player_id = any
        (
            select player_id from player
            where gold_number > 0
            intersect
            select player_id from participate
            where match_id = any
            (
                select match_id from matches
                where sports_id = any
                (
                    select sports_id from sports
                    where stype = %s and team_type = %s and gender = %s
                )
            )
 	    );''',(stype, team_type, gender))
        result = cur.fetchall()
        conn.commit()
        if result:
            msg.set("The golder winners are: {}".format((', ').join(map(lambda x:x[0],result)))
                + "\nThe gold numbers are: {}".format((', ').join(map(str,map(lambda x: x[1],result)))))

        # error message if no result generated by query
        else: msg.set("Players not found")

    except psycopg2.Error as e:
        conn.rollback()
        msg.set(e.pgerror)
